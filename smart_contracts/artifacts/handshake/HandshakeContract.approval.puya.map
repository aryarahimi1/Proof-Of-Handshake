{
  "version": 3,
  "sources": [
    "../../handshake/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYQ;AAAe;AAAf;AAFR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAuFK;;AAAA;AAAA;AAAA;;AAAA;AAvFL;;;AAuFK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAnFL;;;AAmFK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAxDL;;;AAAA;;;AAwDK;;;AAAA;;AAlDA;;AAAA;AAAA;AAAA;;AAAA;AANL;;;AAAA;;;AAMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANL;;AAAA;;;;;;;;;AAMA;;;AAGiB;;AAMF;AAAA;;AAAA;AAAP;AAGe;;AAGA;AAAA;AAAA;AAAA;AACf;AAAgB;AAAhB;AAAA;AAAA;AAAA;AAIiB;AAAA;AAAA;;AAGH;AAAA;AAJK;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AASnB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAGa;AAAV;AAAA;AAAA;AAAA;AAAA;;AAAX;;;AAC6B;;AAAA;AAAA;AAAA;AACjB;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;;AAAA;;AAAA;AAMoB;AAArB;;AAAA;AAAA;AAAA;AAAA;;AAAX;;;AAC4B;AAAA;AAAA;AAChB;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;;AAAA;;AAAA;AAKJ;AAHe;;AAAA;;AAAA;AACX;AAAA;AAAA;;AAAA;AAAA;AAEJ;AAZe;;AAAA;;AAAA;AACX;;AAAA;AAAA;;AAAA;AAAA;;;;AAaZ;;;AAGiB;;AAAT;AAG4B;;AAAA;AAAA;AAAhB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGK;;;AAAA;AAAA;;AAAV;AAAA;;;AAAkD;;AAAA;;;AAAV;;AAAA;AAAxC;;;;AAAP;AAIiB;;AAAA;AAAA;;;AAEJ;;AAAA;;;AACC;;AAAA;;;AAJM;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AASpB;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAImB;AAAA;AAAA;AAAA;AAAZ;AAAP;AAER;;;AAE+B;;AAAA;AAAA;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAG0B;AAAf;;AAAA;AAAA;AAAA;AAAA;;AAAX;;;AACmB;;AAAA;AAAA;AAAP;AAAA;AAGO;;;;AAAP;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.handshake.contract.HandshakeContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8"
    },
    "6": {
      "op": "bytecblock \"counter\" 0x151f7c75 \"handshakes\" \"user_handshakes\" 0x0052 0x0001"
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "59": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "60": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "\"counter\"",
        "0"
      ]
    },
    "61": {
      "op": "app_global_put",
      "stack_out": []
    },
    "62": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "64": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "67": {
      "op": "pushbytess 0x3d26c5cc 0x648576b1 0xc9c9375a 0x5406b7ee 0xe635fdd5 // method \"create_handshake(address,string)uint64\", method \"update_handshake_note(uint64,string)void\", method \"get_counter()uint64\", method \"get_handshake(uint64)(uint64,address,address,uint64,string)\", method \"get_user_handshakes(address)uint64[]\"",
      "defined_out": [
        "Method(create_handshake(address,string)uint64)",
        "Method(get_counter()uint64)",
        "Method(get_handshake(uint64)(uint64,address,address,uint64,string))",
        "Method(get_user_handshakes(address)uint64[])",
        "Method(update_handshake_note(uint64,string)void)"
      ],
      "stack_out": [
        "Method(create_handshake(address,string)uint64)",
        "Method(update_handshake_note(uint64,string)void)",
        "Method(get_counter()uint64)",
        "Method(get_handshake(uint64)(uint64,address,address,uint64,string))",
        "Method(get_user_handshakes(address)uint64[])"
      ]
    },
    "94": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_handshake(address,string)uint64)",
        "Method(get_counter()uint64)",
        "Method(get_handshake(uint64)(uint64,address,address,uint64,string))",
        "Method(get_user_handshakes(address)uint64[])",
        "Method(update_handshake_note(uint64,string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_handshake(address,string)uint64)",
        "Method(update_handshake_note(uint64,string)void)",
        "Method(get_counter()uint64)",
        "Method(get_handshake(uint64)(uint64,address,address,uint64,string))",
        "Method(get_user_handshakes(address)uint64[])",
        "tmp%2#0"
      ]
    },
    "97": {
      "op": "match main_create_handshake_route@5 main_update_handshake_note_route@6 main_get_counter_route@7 main_get_handshake_route@8 main_get_user_handshakes_route@9",
      "stack_out": []
    },
    "109": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "110": {
      "op": "return",
      "stack_out": []
    },
    "111": {
      "block": "main_get_user_handshakes_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "113": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "114": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "115": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "117": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "118": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "121": {
      "callsub": "smart_contracts.handshake.contract.HandshakeContract.get_user_handshakes",
      "op": "callsub get_user_handshakes",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "124": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0x151f7c75"
      ]
    },
    "125": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%31#0"
      ]
    },
    "126": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "127": {
      "op": "log",
      "stack_out": []
    },
    "128": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    },
    "130": {
      "block": "main_get_handshake_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "132": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "133": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "134": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "136": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "137": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "140": {
      "callsub": "smart_contracts.handshake.contract.HandshakeContract.get_handshake",
      "op": "callsub get_handshake",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "143": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "144": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "145": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "146": {
      "op": "log",
      "stack_out": []
    },
    "147": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "return",
      "stack_out": []
    },
    "149": {
      "block": "main_get_counter_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "151": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "152": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "153": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "155": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "156": {
      "callsub": "smart_contracts.handshake.contract.HandshakeContract.get_counter",
      "op": "callsub get_counter",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "159": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%19#0"
      ]
    },
    "161": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "162": {
      "op": "log",
      "stack_out": []
    },
    "163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "164": {
      "op": "return",
      "stack_out": []
    },
    "165": {
      "block": "main_update_handshake_note_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "167": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "168": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "169": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "171": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "172": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "175": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%14#0"
      ]
    },
    "178": {
      "callsub": "smart_contracts.handshake.contract.HandshakeContract.update_handshake_note",
      "op": "callsub update_handshake_note",
      "stack_out": []
    },
    "181": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "return",
      "stack_out": []
    },
    "183": {
      "block": "main_create_handshake_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "185": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "186": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "187": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "189": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "190": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "193": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ]
    },
    "196": {
      "callsub": "smart_contracts.handshake.contract.HandshakeContract.create_handshake",
      "op": "callsub create_handshake",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "199": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "200": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "202": {
      "op": "log",
      "stack_out": []
    },
    "203": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "204": {
      "op": "return",
      "stack_out": []
    },
    "205": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "207": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "210": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "212": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "213": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "214": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "215": {
      "op": "return",
      "stack_out": []
    },
    "216": {
      "subroutine": "smart_contracts.handshake.contract.HandshakeContract.create_handshake",
      "params": {
        "other_user#0": "bytes",
        "note#0": "bytes"
      },
      "block": "create_handshake",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "219": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "221": {
      "op": "dup",
      "defined_out": [
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "222": {
      "op": "frame_dig -2",
      "defined_out": [
        "other_user#0 (copy)",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "other_user#0 (copy)"
      ]
    },
    "224": {
      "op": "!=",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%0#0"
      ]
    },
    "225": {
      "op": "assert",
      "stack_out": [
        "sender#0"
      ]
    },
    "226": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "current_time#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "current_time#0"
      ]
    },
    "228": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "current_time#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "current_time#0",
        "0"
      ]
    },
    "229": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0",
        "current_time#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "current_time#0",
        "0",
        "\"counter\""
      ]
    },
    "230": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_time#0",
        "handshake_id#0",
        "maybe_exists%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "current_time#0",
        "handshake_id#0",
        "maybe_exists%0#0"
      ]
    },
    "231": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "sender#0",
        "current_time#0",
        "handshake_id#0"
      ]
    },
    "232": {
      "op": "dup",
      "defined_out": [
        "current_time#0",
        "handshake_id#0",
        "handshake_id#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "current_time#0",
        "handshake_id#0",
        "handshake_id#0 (copy)"
      ]
    },
    "233": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "current_time#0",
        "handshake_id#0",
        "handshake_id#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "current_time#0",
        "handshake_id#0",
        "handshake_id#0 (copy)",
        "1"
      ]
    },
    "234": {
      "op": "+",
      "defined_out": [
        "current_time#0",
        "handshake_id#0",
        "materialized_values%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "current_time#0",
        "handshake_id#0",
        "materialized_values%0#0"
      ]
    },
    "235": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "sender#0",
        "current_time#0",
        "handshake_id#0",
        "materialized_values%0#0",
        "\"counter\""
      ]
    },
    "236": {
      "op": "swap",
      "stack_out": [
        "sender#0",
        "current_time#0",
        "handshake_id#0",
        "\"counter\"",
        "materialized_values%0#0"
      ]
    },
    "237": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "current_time#0",
        "handshake_id#0"
      ]
    },
    "238": {
      "op": "itob",
      "defined_out": [
        "current_time#0",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "sender#0",
        "current_time#0",
        "val_as_bytes%0#0"
      ]
    },
    "239": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "current_time#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "240": {
      "op": "cover 3",
      "defined_out": [
        "current_time#0",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "current_time#0",
        "val_as_bytes%0#0"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "current_time#0"
      ]
    },
    "243": {
      "op": "itob",
      "defined_out": [
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "244": {
      "op": "dig 1",
      "defined_out": [
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "246": {
      "op": "dig 3",
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0 (copy)",
        "sender#0 (copy)"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "249": {
      "op": "frame_dig -2",
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "other_user#0 (copy)"
      ]
    },
    "251": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "252": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "254": {
      "op": "bytec 4 // 0x0052",
      "defined_out": [
        "0x0052",
        "encoded_tuple_buffer%4#0",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "0x0052"
      ]
    },
    "256": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "257": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "note#0 (copy)",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0",
        "note#0 (copy)"
      ]
    },
    "259": {
      "op": "concat",
      "defined_out": [
        "handshake_record#0",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "handshake_record#0"
      ]
    },
    "260": {
      "op": "bytec_2 // \"handshakes\"",
      "defined_out": [
        "\"handshakes\"",
        "handshake_record#0",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "val_as_bytes%0#0",
        "handshake_record#0",
        "\"handshakes\""
      ]
    },
    "261": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "handshake_record#0",
        "\"handshakes\"",
        "val_as_bytes%0#0"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake_record#0",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "handshake_record#0",
        "box_prefixed_key%0#0"
      ]
    },
    "264": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "handshake_record#0",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "handshake_record#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "265": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake_record#0",
        "sender#0",
        "val_as_bytes%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "handshake_record#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "266": {
      "op": "pop",
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "handshake_record#0",
        "box_prefixed_key%0#0"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake_record#0"
      ]
    },
    "268": {
      "op": "box_put",
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0"
      ]
    },
    "269": {
      "op": "bytec_3 // \"user_handshakes\"",
      "defined_out": [
        "\"user_handshakes\"",
        "sender#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "sender#0",
        "\"user_handshakes\""
      ]
    },
    "270": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "\"user_handshakes\"",
        "sender#0"
      ]
    },
    "271": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "272": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0"
      ]
    },
    "273": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%1#0",
        "maybe_exists%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "_%0#0",
        "maybe_exists%2#0"
      ]
    },
    "274": {
      "op": "bury 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "maybe_exists%2#0"
      ]
    },
    "276": {
      "op": "bz create_handshake_else_body@2",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "279": {
      "op": "frame_dig 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0"
      ]
    },
    "281": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)"
      ]
    },
    "282": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%1#0",
        "initiator_list#0",
        "maybe_exists%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "initiator_list#0",
        "maybe_exists%3#0"
      ]
    },
    "283": {
      "error": "check self.user_handshakes entry exists",
      "op": "assert // check self.user_handshakes entry exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "initiator_list#0"
      ]
    },
    "284": {
      "op": "extract 2 0",
      "defined_out": [
        "box_prefixed_key%1#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "287": {
      "op": "frame_dig 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "expr_value_trimmed%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "289": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "concatenated%0#0"
      ]
    },
    "290": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "291": {
      "op": "len",
      "defined_out": [
        "box_prefixed_key%1#0",
        "byte_len%0#0",
        "concatenated%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "292": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "box_prefixed_key%1#0",
        "byte_len%0#0",
        "concatenated%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "293": {
      "op": "/",
      "defined_out": [
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "len_%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "294": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "as_bytes%1#0"
      ]
    },
    "295": {
      "op": "extract 6 2",
      "defined_out": [
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "len_16_bit%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "298": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "299": {
      "op": "concat",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "initiator_list#0"
      ]
    },
    "300": {
      "op": "dig 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "initiator_list#0",
        "box_prefixed_key%1#0 (copy)"
      ]
    },
    "302": {
      "op": "box_del",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "initiator_list#0",
        "{box_del}"
      ]
    },
    "303": {
      "op": "pop",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "initiator_list#0"
      ]
    },
    "304": {
      "op": "box_put",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "305": {
      "block": "create_handshake_after_if_else@3",
      "stack_in": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0"
      ],
      "op": "bytec_3 // \"user_handshakes\"",
      "defined_out": [
        "\"user_handshakes\""
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "\"user_handshakes\""
      ]
    },
    "306": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"user_handshakes\"",
        "other_user#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "\"user_handshakes\"",
        "other_user#0 (copy)"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0"
      ]
    },
    "309": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "box_prefixed_key%5#0"
      ]
    },
    "310": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%5#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "_%1#0",
        "maybe_exists%4#0"
      ]
    },
    "311": {
      "op": "bury 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "maybe_exists%4#0"
      ]
    },
    "313": {
      "op": "bz create_handshake_else_body@5",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0"
      ]
    },
    "316": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%5#0",
        "box_prefixed_key%5#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "box_prefixed_key%5#0 (copy)"
      ]
    },
    "317": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%5#0",
        "maybe_exists%5#0",
        "receiver_list#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "receiver_list#0",
        "maybe_exists%5#0"
      ]
    },
    "318": {
      "error": "check self.user_handshakes entry exists",
      "op": "assert // check self.user_handshakes entry exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "receiver_list#0"
      ]
    },
    "319": {
      "op": "extract 2 0",
      "defined_out": [
        "box_prefixed_key%5#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "322": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%5#0",
        "expr_value_trimmed%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "expr_value_trimmed%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "324": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "concatenated%1#0"
      ]
    },
    "325": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "326": {
      "op": "len",
      "defined_out": [
        "box_prefixed_key%5#0",
        "byte_len%1#0",
        "concatenated%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "byte_len%1#0"
      ]
    },
    "327": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "box_prefixed_key%5#0",
        "byte_len%1#0",
        "concatenated%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "byte_len%1#0",
        "8"
      ]
    },
    "328": {
      "op": "/",
      "defined_out": [
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "len_%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "as_bytes%2#0"
      ]
    },
    "330": {
      "op": "extract 6 2",
      "defined_out": [
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "len_16_bit%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "333": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "334": {
      "op": "concat",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "receiver_list#0"
      ]
    },
    "335": {
      "op": "dig 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "receiver_list#0",
        "box_prefixed_key%5#0 (copy)"
      ]
    },
    "337": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%5#0",
        "receiver_list#0",
        "val_as_bytes%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "receiver_list#0",
        "{box_del}"
      ]
    },
    "338": {
      "op": "pop",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "receiver_list#0"
      ]
    },
    "339": {
      "op": "box_put",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "340": {
      "retsub": true,
      "op": "retsub",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "341": {
      "block": "create_handshake_else_body@5",
      "stack_in": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0"
      ],
      "op": "bytec 5 // 0x0001",
      "defined_out": [
        "0x0001"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "0x0001"
      ]
    },
    "343": {
      "op": "frame_dig 0",
      "defined_out": [
        "0x0001",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "0x0001",
        "val_as_bytes%0#0"
      ]
    },
    "345": {
      "op": "concat",
      "defined_out": [
        "new_list#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "new_list#0"
      ]
    },
    "346": {
      "op": "swap",
      "defined_out": [
        "box_prefixed_key%5#0",
        "new_list#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "new_list#0",
        "box_prefixed_key%5#0"
      ]
    },
    "347": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%5#0",
        "box_prefixed_key%5#0 (copy)",
        "new_list#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "new_list#0",
        "box_prefixed_key%5#0",
        "box_prefixed_key%5#0 (copy)"
      ]
    },
    "348": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%5#0",
        "new_list#0",
        "val_as_bytes%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "new_list#0",
        "box_prefixed_key%5#0",
        "{box_del}"
      ]
    },
    "349": {
      "op": "pop",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "new_list#0",
        "box_prefixed_key%5#0"
      ]
    },
    "350": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%5#0",
        "new_list#0"
      ]
    },
    "351": {
      "op": "box_put",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "352": {
      "retsub": true,
      "op": "retsub",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "353": {
      "block": "create_handshake_else_body@2",
      "stack_in": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0"
      ],
      "op": "bytec 5 // 0x0001",
      "defined_out": [
        "0x0001"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "0x0001"
      ]
    },
    "355": {
      "op": "frame_dig 0",
      "defined_out": [
        "0x0001",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "0x0001",
        "val_as_bytes%0#0"
      ]
    },
    "357": {
      "op": "concat",
      "defined_out": [
        "new_list#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "new_list#0"
      ]
    },
    "358": {
      "op": "frame_dig 1",
      "defined_out": [
        "box_prefixed_key%1#0",
        "new_list#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "new_list#0",
        "box_prefixed_key%1#0"
      ]
    },
    "360": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)",
        "new_list#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "new_list#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)"
      ]
    },
    "361": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%1#0",
        "new_list#0",
        "val_as_bytes%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "new_list#0",
        "box_prefixed_key%1#0",
        "{box_del}"
      ]
    },
    "362": {
      "op": "pop",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "new_list#0",
        "box_prefixed_key%1#0"
      ]
    },
    "363": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0",
        "new_list#0"
      ]
    },
    "364": {
      "op": "box_put",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "365": {
      "op": "b create_handshake_after_if_else@3"
    },
    "368": {
      "subroutine": "smart_contracts.handshake.contract.HandshakeContract.update_handshake_note",
      "params": {
        "handshake_id#0": "bytes",
        "new_note#0": "bytes"
      },
      "block": "update_handshake_note",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "371": {
      "op": "txn Sender"
    },
    "373": {
      "op": "dup"
    },
    "374": {
      "op": "frame_dig -2",
      "defined_out": [
        "handshake_id#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "sender#0",
        "handshake_id#0 (copy)"
      ]
    },
    "376": {
      "op": "btoi",
      "defined_out": [
        "materialized_values%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "sender#0",
        "materialized_values%0#0"
      ]
    },
    "377": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "sender#0",
        "encoded_value%0#0"
      ]
    },
    "378": {
      "op": "bytec_2 // \"handshakes\"",
      "defined_out": [
        "\"handshakes\"",
        "encoded_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "sender#0",
        "encoded_value%0#0",
        "\"handshakes\""
      ]
    },
    "379": {
      "op": "swap",
      "stack_out": [
        "sender#0",
        "sender#0",
        "\"handshakes\"",
        "encoded_value%0#0"
      ]
    },
    "380": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "sender#0",
        "box_prefixed_key%0#0"
      ]
    },
    "381": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "382": {
      "op": "cover 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "sender#0",
        "box_prefixed_key%0#0"
      ]
    },
    "384": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake#0",
        "maybe_exists%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "sender#0",
        "handshake#0",
        "maybe_exists%0#0"
      ]
    },
    "385": {
      "op": "swap",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "sender#0",
        "maybe_exists%0#0",
        "handshake#0"
      ]
    },
    "386": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "sender#0",
        "maybe_exists%0#0",
        "handshake#0",
        "handshake#0 (copy)"
      ]
    },
    "387": {
      "op": "cover 2",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "sender#0",
        "handshake#0",
        "maybe_exists%0#0",
        "handshake#0"
      ]
    },
    "389": {
      "op": "cover 3",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake#0",
        "maybe_exists%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "sender#0",
        "handshake#0",
        "maybe_exists%0#0"
      ]
    },
    "391": {
      "error": "check self.handshakes entry exists",
      "op": "assert // check self.handshakes entry exists",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "sender#0",
        "handshake#0"
      ]
    },
    "392": {
      "error": "Index access is out of bounds",
      "op": "extract 8 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "sender#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "395": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "sender#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "396": {
      "op": "cover 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "sender#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "398": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%0#0"
      ]
    },
    "399": {
      "op": "bnz update_handshake_note_bool_true@2",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "402": {
      "op": "frame_dig 2",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "handshake#0"
      ]
    },
    "404": {
      "error": "Index access is out of bounds",
      "op": "extract 40 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "407": {
      "op": "frame_dig 0",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "sender#0"
      ]
    },
    "409": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0"
      ]
    },
    "410": {
      "op": "bz update_handshake_note_bool_false@3",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "413": {
      "block": "update_handshake_note_bool_true@2",
      "stack_in": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "or_result%0#0"
      ]
    },
    "414": {
      "block": "update_handshake_note_bool_merge@4",
      "stack_in": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "415": {
      "op": "frame_dig 2",
      "defined_out": [
        "handshake#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "handshake#0"
      ]
    },
    "417": {
      "op": "dup",
      "defined_out": [
        "handshake#0",
        "handshake#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "handshake#0",
        "handshake#0 (copy)"
      ]
    },
    "418": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "handshake#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "handshake#0",
        "tmp%2#0"
      ]
    },
    "421": {
      "op": "dig 1",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "handshake#0",
        "tmp%2#0",
        "handshake#0 (copy)"
      ]
    },
    "423": {
      "error": "Index access is out of bounds",
      "op": "extract 40 32 // on error: Index access is out of bounds",
      "defined_out": [
        "handshake#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "handshake#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "426": {
      "op": "uncover 2",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "handshake#0"
      ]
    },
    "428": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "handshake#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "431": {
      "op": "uncover 2",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%2#0"
      ]
    },
    "433": {
      "op": "frame_dig 3",
      "defined_out": [
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%2#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "435": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "436": {
      "op": "uncover 2",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "tmp%4#0"
      ]
    },
    "438": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "439": {
      "op": "swap",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ]
    },
    "440": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "441": {
      "op": "bytec 4 // 0x0052",
      "defined_out": [
        "0x0052",
        "encoded_tuple_buffer%4#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "encoded_tuple_buffer%4#0",
        "0x0052"
      ]
    },
    "443": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "444": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "handshake#0",
        "new_note#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "encoded_tuple_buffer%5#0",
        "new_note#0 (copy)"
      ]
    },
    "446": {
      "op": "concat",
      "defined_out": [
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "updated_handshake#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "updated_handshake#0"
      ]
    },
    "447": {
      "op": "frame_dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "updated_handshake#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "updated_handshake#0",
        "box_prefixed_key%0#0"
      ]
    },
    "449": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "updated_handshake#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "updated_handshake#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "450": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "updated_handshake#0",
        "{box_del}"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "updated_handshake#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "451": {
      "op": "pop",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "updated_handshake#0",
        "box_prefixed_key%0#0"
      ]
    },
    "452": {
      "op": "swap",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "updated_handshake#0"
      ]
    },
    "453": {
      "op": "box_put",
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "454": {
      "retsub": true,
      "op": "retsub"
    },
    "455": {
      "block": "update_handshake_note_bool_false@3",
      "stack_in": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "sender#0",
        "box_prefixed_key%0#0",
        "handshake#0",
        "reinterpret_bytes[32]%0#0",
        "or_result%0#0"
      ]
    },
    "456": {
      "op": "b update_handshake_note_bool_merge@4"
    },
    "459": {
      "subroutine": "smart_contracts.handshake.contract.HandshakeContract.get_counter",
      "params": {},
      "block": "get_counter",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "460": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"counter\""
      ]
    },
    "461": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "462": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "463": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "464": {
      "retsub": true,
      "op": "retsub"
    },
    "465": {
      "subroutine": "smart_contracts.handshake.contract.HandshakeContract.get_handshake",
      "params": {
        "handshake_id#0": "bytes"
      },
      "block": "get_handshake",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "468": {
      "op": "frame_dig -1",
      "defined_out": [
        "handshake_id#0 (copy)"
      ],
      "stack_out": [
        "handshake_id#0 (copy)"
      ]
    },
    "470": {
      "op": "btoi",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "471": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "472": {
      "op": "bytec_2 // \"handshakes\"",
      "defined_out": [
        "\"handshakes\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"handshakes\""
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "\"handshakes\"",
        "encoded_value%0#0"
      ]
    },
    "474": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "475": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "476": {
      "error": "check self.handshakes entry exists",
      "op": "assert // check self.handshakes entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "477": {
      "retsub": true,
      "op": "retsub"
    },
    "478": {
      "subroutine": "smart_contracts.handshake.contract.HandshakeContract.get_user_handshakes",
      "params": {
        "user#0": "bytes"
      },
      "block": "get_user_handshakes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "481": {
      "op": "bytec_3 // \"user_handshakes\"",
      "defined_out": [
        "\"user_handshakes\""
      ],
      "stack_out": [
        "\"user_handshakes\""
      ]
    },
    "482": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"user_handshakes\"",
        "user#0 (copy)"
      ],
      "stack_out": [
        "\"user_handshakes\"",
        "user#0 (copy)"
      ]
    },
    "484": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "485": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "486": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "487": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "489": {
      "op": "bz get_user_handshakes_else_body@2",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "492": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "494": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "495": {
      "error": "check self.user_handshakes entry exists",
      "op": "assert // check self.user_handshakes entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0"
      ]
    },
    "496": {
      "op": "swap"
    },
    "497": {
      "retsub": true,
      "op": "retsub"
    },
    "498": {
      "block": "get_user_handshakes_else_body@2",
      "stack_in": [
        "box_prefixed_key%0#0"
      ],
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "0x0000"
      ]
    },
    "502": {
      "op": "swap"
    },
    "503": {
      "retsub": true,
      "op": "retsub"
    }
  }
}