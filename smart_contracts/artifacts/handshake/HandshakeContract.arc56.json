{
    "name": "HandshakeContract",
    "structs": {
        "HandshakeRecord": [
            {
                "name": "handshake_id",
                "type": "uint64"
            },
            {
                "name": "initiator",
                "type": "address"
            },
            {
                "name": "receiver",
                "type": "address"
            },
            {
                "name": "timestamp",
                "type": "uint64"
            },
            {
                "name": "note",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "create_handshake",
            "args": [
                {
                    "type": "address",
                    "name": "other_user"
                },
                {
                    "type": "string",
                    "name": "note"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_handshake_note",
            "args": [
                {
                    "type": "uint64",
                    "name": "handshake_id"
                },
                {
                    "type": "string",
                    "name": "new_note"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the note of an existing handshake (only by participants)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_counter",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_handshake",
            "args": [
                {
                    "type": "uint64",
                    "name": "handshake_id"
                }
            ],
            "returns": {
                "type": "(uint64,address,address,uint64,string)",
                "struct": "HandshakeRecord"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_user_handshakes",
            "args": [
                {
                    "type": "address",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "NEW: Get all handshake IDs for a specific user",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnRlcg=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "handshakes": {
                    "keyType": "uint64",
                    "valueType": "HandshakeRecord",
                    "prefix": "aGFuZHNoYWtlcw=="
                },
                "user_handshakes": {
                    "keyType": "address",
                    "valueType": "uint64[]",
                    "prefix": "dXNlcl9oYW5kc2hha2Vz"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        392,
                        404,
                        418,
                        423,
                        428
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        114,
                        133,
                        152,
                        168,
                        186
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        213
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        117,
                        136,
                        155,
                        171,
                        189
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        231,
                        462
                    ],
                    "errorMessage": "check self.counter exists"
                },
                {
                    "pc": [
                        391,
                        476
                    ],
                    "errorMessage": "check self.handshakes entry exists"
                },
                {
                    "pc": [
                        283,
                        318,
                        495
                    ],
                    "errorMessage": "check self.user_handshakes entry exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAQAIJgYHY291bnRlcgQVH3x1CmhhbmRzaGFrZXMPdXNlcl9oYW5kc2hha2VzAgBSAgABMRhAAAMoI2cxG0EAioIFBD0mxcwEZIV2sQTJyTdaBFQGt+4E5jX91TYaAI4FAEoAOAAoABUAAiNDMRkURDEYRDYaAYgBYilMULAiQzEZFEQxGEQ2GgGIAUIpTFCwIkMxGRREMRhEiAEsKUxQsCJDMRkURDEYRDYaATYaAogAuyJDMRkURDEYRDYaATYaAogAESlMULAiQzEZQP+bMRgURCJDigIBMQBJi/4TRDIHIyhlREkiCChMZxZJTgNMFksBSwNQi/5QTFAnBFCL/1AqTwJQSbxITL8rTFBJvUUBQQBKiwFJvkRXAgCLAFBJFSQKFlcGAkxQSwG8SL8ri/5QSb1FAUEAGUm+RFcCAIsAUEkVJAoWVwYCTFBLAbxIv4knBYsAUExJvEhMv4knBYsAUIsBSbxITL9C/8GKAgAxAEmL/hcWKkxQSU4CvkxJTgJOA0RXCCBJTgISQAALiwJXKCCLABJBACoiRIsCSVcACEsBVyggTwJXSAhPAosDUE8CUExQJwRQi/9QiwFJvEhMv4kjQv/TIyhlRBaJigEBi/8XFipMUL5EiYoBASuL/1BJvUUBQQAGiwC+REyJgAIAAEyJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}